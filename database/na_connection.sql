-- Bảng loaighe
CREATE TABLE loaighe (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    maloaighe CHAR(15) NOT NULL,
    giave REAL
);

-- Bảng ghe
CREATE TABLE ghe (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    maghe VARCHAR2(10 BYTE) NOT NULL,
    trangthai NVARCHAR2(40),
    idloaighe NUMBER NOT NULL,
    CONSTRAINT fk_ghe_idloaighe FOREIGN KEY (idloaighe) REFERENCES loaighe(id)
);
ALTER TABLE ghe
ADD CONSTRAINT chk_trangthai_ghe
CHECK (trangthai IN (N'Sử dụng được', N'Không sử dụng được'));

-- Bảng ve
CREATE TABLE ve (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    userid NUMBER NOT NULL,
    idghe NUMBER NOT NULL,
    idlichchieu NUMBER NOT NULL,
    ngayban TIMESTAMP,
    CONSTRAINT fk_ve_idghe FOREIGN KEY (idghe) REFERENCES ghe(id),
    CONSTRAINT fk_ve_idlichchieu FOREIGN KEY (idlichchieu) REFERENCES lichchieu(id)
);
ALTER TABLE ve MODIFY userid NUMBER NULL;

ALTER TABLE ve
ADD CONSTRAINT uq_idghe_idlichchieu
UNIQUE (idghe, idlichchieu);

ALTER TABLE ve
ADD CONSTRAINT fk_ve_userid
FOREIGN KEY (userid) REFERENCES users(id);

-- Bảng users
CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roleid NUMBER NOT NULL,
    username VARCHAR2(255) NOT NULL,
    password VARCHAR2(255) NOT NULL,
    fullname VARCHAR2(255),
    dateofbirth DATE,
    sex VARCHAR2(20),
    address VARCHAR2(255),
    phonenumber VARCHAR2(20),
    usercode VARCHAR2(255 BYTE)ALTER TABLE users
ADD CONSTRAINT fk_users_roleid
FOREIGN KEY (roleid) REFERENCES role(id);
);


-- Bảng cachieu
CREATE TABLE cachieu (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    macachieu CHAR(10) NOT NULL,
    thoigian TIMESTAMP
);

-- Bảng phong
CREATE TABLE phong (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    maphong CHAR(10) NOT NULL,
    tenphong NVARCHAR2(255),
    soghe1day INT,
    soluongday INT
);

-- Bảng phim
CREATE TABLE phim (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    maphim VARCHAR2(10 BYTE) NOT NULL,
    tenphim NVARCHAR2(255),
    thoiluong INT,
    hangsx NVARCHAR2(255),
    theloai NVARCHAR2(255),
    motangan VARCHAR2(4000)
);

-- Bảng lichchieu
CREATE TABLE lichchieu (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    malichchieu VARCHAR2(10 BYTE) NOT NULL,
    ngaychieu DATE,
    idcachieu NUMBER NOT NULL,
    idphong NUMBER NOT NULL,
    idphim NUMBER NOT NULL,
    CONSTRAINT fk_lichchieu_idcachieu FOREIGN KEY (idcachieu) REFERENCES cachieu(id),
    CONSTRAINT fk_lichchieu_idphong FOREIGN KEY (idphong) REFERENCES phong(id),
    CONSTRAINT fk_lichchieu_idphim FOREIGN KEY (idphim) REFERENCES phim(id)
);
ALTER TABLE lichchieu
ADD CONSTRAINT uq_lichchieu_phong_cachieu_ngay
UNIQUE (idphong, idcachieu, ngaychieu);

-- Bảng role
CREATE TABLE role (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    code VARCHAR2(20)
);

-- 2.1  Tạo hai role ứng dụng
INSERT INTO role (name, code) VALUES ('Quản lý',  'quan-ly');
INSERT INTO role (name, code) VALUES ('Nhân viên','nhan-vien');

-- 2.2  Tạo tài khoản ADMIN
INSERT INTO users
    (roleid, username, password, fullname, dateofbirth, sex, address, phonenumber)
VALUES
    ((SELECT id FROM role WHERE code = 'quan-ly'),
     'admin',  'admin123',
     'Quản trị hệ thống',
     DATE '1990-01-01',
     'Nam',
     'Hà Nội',
     '0900000000');



-----------------------Tạo phòng có sẵn của rạp phim---------------------------------------------

BEGIN
    FOR i IN 1..10 LOOP
        INSERT INTO phong (maphong, tenphong, soghe1day, soluongday)
        VALUES (
            'P' || LPAD(i, 3, '0'),
            'Phòng ' || TO_CHAR(i),
            10 + MOD(i, 5),    -- số ghế mỗi dãy (ví dụ 10–14)
            5 + MOD(i, 3)      -- số lượng dãy (ví dụ 5–7)
        );
    END LOOP;
    COMMIT;
END;
/
commit;

------------------------Tạo ca chiếu có sẵn của rạp phim------------------------------------------
BEGIN
    FOR i IN 1..10 LOOP
        INSERT INTO cachieu (macachieu, thoigian)
        VALUES (
            'CA' || LPAD(i, 2, '0'),
            TO_TIMESTAMP(TO_CHAR(TO_TIMESTAMP('07:00:00', 'HH24:MI:SS') + NUMTODSINTERVAL((i - 1) * 105, 'MINUTE'), 'HH24:MI:SS'), 'HH24:MI:SS')
        );
    END LOOP;
    COMMIT;
END;
/
commit;

-----------------------Tạo ghế có sẵn của rạp phim------------------------------------------------
BEGIN
    INSERT INTO loaighe (maloaighe, giave) VALUES ('LG-VIP', 150000);
    INSERT INTO loaighe (maloaighe, giave) VALUES ('LG-DOI', 200000);
    INSERT INTO loaighe (maloaighe, giave) VALUES ('LG-THUONG', 100000);
    INSERT INTO loaighe (maloaighe, giave) VALUES ('LG-DELUXE', 180000);
    INSERT INTO loaighe (maloaighe, giave) VALUES ('LG-SWEETBOX', 220000);
    INSERT INTO loaighe (maloaighe, giave) VALUES ('LG-ECONOMY', 70000);
    COMMIT;
END;
/
commit;

---------------PROCEDURE thống kê tổng số vé bán ra, tổng số tiền tháng/năm-----------------------
CREATE OR REPLACE PROCEDURE thong_ke_doanh_thu(
    p_thang IN NUMBER,
    p_nam IN NUMBER,
    p_so_luong OUT NUMBER,
    p_tong_tien OUT NUMBER
) AS
BEGIN
    SELECT COUNT(*), NVL(SUM(lg.giave), 0)
    INTO p_so_luong, p_tong_tien
    FROM ve v
    JOIN ghe g ON v.idghe = g.id
    JOIN loaighe lg ON g.idloaighe = lg.id
    WHERE EXTRACT(MONTH FROM v.ngayban) = p_thang
      AND EXTRACT(YEAR FROM v.ngayban) = p_nam;
END;
/
-------------------PROCEDURE xóa phim--------------------------------------
CREATE OR REPLACE PROCEDURE proc_xoa_phim_an_toan(p_id IN NUMBER) AS
    v_count_future NUMBER;
BEGIN
    -- Kiểm tra số lịch chiếu của phim trong tương lai (hoặc hiện tại)
    SELECT COUNT(*) INTO v_count_future
    FROM lichchieu
    WHERE idphim = p_id AND (
        ngaychieu > SYSDATE OR 
        (ngaychieu = TRUNC(SYSDATE) AND idcachieu IN (
            SELECT id FROM cachieu WHERE thoigian > SYSTIMESTAMP
        ))
    );

    IF v_count_future > 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Không thể xóa phim: vẫn còn lịch chiếu trong tương lai.');
    ELSE
        DELETE FROM phim WHERE id = p_id;

        -- ✅ Nếu không có dòng nào bị xóa, báo lỗi do người khác đã xóa
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20006, 'Phim không còn tồn tại. Có thể đã bị xóa bởi người khác.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Phim đã được xóa thành công.');
    END IF;
END;
/
commit;

-------------------PROCEDURE xóa lịch chiếu--------------------------------------
CREATE OR REPLACE PROCEDURE proc_xoa_lichchieu_an_toan(p_idlichchieu IN NUMBER) IS
    v_ngaychieu DATE;
    v_thoigiancachieu TIMESTAMP;
    v_thoidiemchieu TIMESTAMP;
    v_soluongve NUMBER;
BEGIN
    -- Lấy ngày chiếu và thời gian ca chiếu
    SELECT lc.ngaychieu, cc.thoigian
    INTO v_ngaychieu, v_thoigiancachieu
    FROM lichchieu lc
    JOIN cachieu cc ON lc.idcachieu = cc.id
    WHERE lc.id = p_idlichchieu;

    -- Gộp ngày chiếu và thời gian thành 1 thời điểm
    v_thoidiemchieu := TO_TIMESTAMP(v_ngaychieu) + (v_thoigiancachieu - TRUNC(v_thoigiancachieu));

    -- Đếm số lượng vé liên quan
    SELECT COUNT(*) INTO v_soluongve
    FROM ve
    WHERE idlichchieu = p_idlichchieu;

    -- Kiểm tra điều kiện xóa
    IF v_thoidiemchieu < SYSTIMESTAMP OR v_soluongve = 0 THEN
        -- Xóa vé trước
        DELETE FROM ve WHERE idlichchieu = p_idlichchieu;

        -- Xóa lịch chiếu
        DELETE FROM lichchieu WHERE id = p_idlichchieu;

        -- Nếu không có dòng nào bị xóa, nghĩa là đã bị xóa bởi transaction khác
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20006, 'Lịch chiếu đã bị xóa bởi người khác.');
        END IF;

        COMMIT;
    ELSE
        -- Không cho xóa
        RAISE_APPLICATION_ERROR(-20005, 'Không thể xóa lịch chiếu vì chưa diễn ra và đã có vé bán ra.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20007, 'Lịch chiếu không tồn tại.');
END;
/
commit;

-------------------PROCEDURE xóa ghế ngồi--------------------------------------
CREATE OR REPLACE PROCEDURE proc_xoa_ghe_an_toan(p_idghe IN NUMBER) AS
    v_count NUMBER;
    v_lock_result NUMBER;
    -- Khai báo hằng số tương ứng với DBMS_LOCK
    c_resource_busy CONSTANT NUMBER := 1;
    c_success CONSTANT NUMBER := 0;
BEGIN
    -- Thử lấy lock kiểu exclusive trong 10 giây
    v_lock_result := DBMS_LOCK.REQUEST(
        id => 12345,  -- ID lock tự chọn, số nguyên >= 0 và <= 1073741823
        timeout => 10,
        release_on_commit => TRUE
    );

    IF v_lock_result = c_resource_busy THEN
        RAISE_APPLICATION_ERROR(-20007, 'Ghế đang bị khóa bởi giao dịch khác, vui lòng thử lại sau.');
    ELSIF v_lock_result != c_success THEN
        RAISE_APPLICATION_ERROR(-20008, 'Không thể lấy lock, lỗi hệ thống.');
    END IF;

    -- Đếm số vé liên quan tới ghế mà lịch chiếu vẫn còn trong tương lai
    SELECT COUNT(*)
    INTO v_count
    FROM ve v
    JOIN lichchieu lc ON v.idlichchieu = lc.id
    JOIN cachieu cc ON lc.idcachieu = cc.id
    WHERE v.idghe = p_idghe
      AND (lc.ngaychieu + (cc.thoigian - TRUNC(cc.thoigian))) > SYSDATE;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'Không thể xóa ghế vì có vé liên quan đến lịch chiếu chưa diễn ra.');
    END IF;

    -- Xóa ghế
    DELETE FROM ghe WHERE id = p_idghe;

END;
/
commit;

-------------------Trigger kiểm tra update ghế khi có thay đổi trạng thái của ghế--------------------------------------
CREATE OR REPLACE TRIGGER trg_update_ghe_status
BEFORE UPDATE OF trangthai ON ghe
FOR EACH ROW
DECLARE
    v_count NUMBER;
    v_ve_count NUMBER;
    v_now TIMESTAMP := SYSTIMESTAMP;
BEGIN
    -- Chỉ xử lý khi trạng thái được cập nhật thành 'Không sử dụng được'
    IF :NEW.trangthai = N'Không sử dụng được' THEN
        -- Đếm số vé có ghế này
        SELECT COUNT(*) INTO v_ve_count FROM ve WHERE idghe = :OLD.id;

        -- Nếu không có vé nào, thì OK giữ trạng thái
        IF v_ve_count = 0 THEN
            RETURN;
        END IF;

        -- Kiểm tra các vé liên quan: xem có vé nào có lịch chiếu hoặc cách chiếu chưa qua thời điểm hiện tại không
        SELECT COUNT(*)
        INTO v_count
        FROM ve v
        JOIN lichchieu lc ON v.idlichchieu = lc.id
        JOIN cachieu cc ON lc.idcachieu = cc.id
        WHERE v.idghe = :OLD.id
          AND (
               -- Lịch chiếu ngày chiếu + thời gian cách chiếu chưa qua hiện tại (chưa kết thúc)
               (lc.ngaychieu + (cc.thoigian - TRUNC(cc.thoigian))) > v_now
              );

        -- Nếu còn vé đang hiệu lực (chưa kết thúc), không cho chuyển trạng thái "Không sử dụng được"
        IF v_count > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'Không thể chuyển ghế sang "Không sử dụng được" do vẫn còn vé hiệu lực.');
        END IF;
    END IF;
END;
/
commit;

--------------------------------PROCEDURE xóa nhân viên nhưng không ảnh hưởng vé--------------------------------------------------
CREATE OR REPLACE PROCEDURE proc_delete_user (
    p_userid IN NUMBER
) IS
BEGIN
    -- Cập nhật vé để userid thành NULL với vé của user cần xóa
    UPDATE ve
    SET userid = NULL
    WHERE userid = p_userid;

    -- Xóa user
    DELETE FROM users WHERE id = p_userid;

    COMMIT;
END;
/
commit;